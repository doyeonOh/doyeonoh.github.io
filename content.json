{"meta":{"title":"Doyeon's Blog","subtitle":"Doyeon's Blog","description":"Doyeon's IT Blog","author":"Doyeon Oh","url":"https://doyeonOh.github.io"},"pages":[{"title":"About","date":"2016-12-15T01:28:56.308Z","updated":"2016-12-15T01:28:56.308Z","comments":true,"path":"about/index.html","permalink":"https://doyeonOh.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Angular2 Routing(2)","slug":"Angular2-Routing-2","date":"2017-03-13T01:59:00.000Z","updated":"2017-03-14T10:37:14.448Z","comments":true,"path":"2017/03/13/Angular2-Routing-2/","link":"","permalink":"https://doyeonOh.github.io/2017/03/13/Angular2-Routing-2/","excerpt":"","text":"5. Route Parameter특정 리소스에 대해 라우팅 하고 싶을 때가 있다. 예를 들어, 뉴스 기사 사이트에는 많은 기사들이 있는데 각 기사들은 id 를 가지고 있다. id 가 3인 url 을 표현하면 다음과 같다. 1/articles/3 그리고 id 가 4인 것은 다음과 같다. 1/articles/4 하지만 이렇게 많은 것들을 매번 하나하나 라우팅 할 순 없다. 이것을 변수를 사용하여 이용 할 수가 있다. 즉 이것이 라우트 파라메터인데 라우트가 파라메터를 가지게 하려면 다음과 같이 앞에 콜론을 붙여주면 된다. 1/routes/:param 위의 뉴스 기사를 라우트 파라메터로 표현하면 다음과 같이 된다. 1/articles/:id Routes 설정에 추가해보면 다음과 같다. 1234567const routes: Routes = [ &#123; path: '', redirectTo: 'search', pathMatch: 'full' &#125;, &#123; path: 'search', component: SearchComponent &#125;, &#123; path: 'artists/:id', component: ArtistComponent &#125;, &#123; path: 'tracks/:id', component: TrackComponent &#125;, &#123; path: 'albums/:id', component: AlbumComponent &#125;,]; artists/123 으로 방문 한다면, 해당 123을 가진 id 라우트 파라메터가 ArtistComponent 에 전달 될 것이다. 5-1. ActivatedRoute라우트 파라메터를 사용하려면, 먼저 ActivatedRoute 를 가져와야 한다. 1import &#123; ActivatedRoute &#125; from '@angular/router'; 다음으로 ActivatedRoute 를 컴포넌트 생성자로 주입 받는다. 예를들어 다음을 지정하는 Routes 가 있다고 하자. 123const routes: Routes = [ &#123; path: 'articles/:id', component: ArticlesComponent &#125;]; 그런다음 ArticleComponent 를 작성할 때, ActivatedRoute 를 생성자의 파라메터 하나로 추가한다. 1234567export class ArticleComponent &#123; id: string; constructor(private route: ActivatedRoute) &#123; route.params.subscribe(params =&gt; &#123; this.id = params['id']; &#125;); &#125;&#125; route.params 는 Observable 인 것을 알아야 한다. params 값을 .subscribe 를 사용하여 추출 할 수 있다. 이 경우, 우리는 params[&#39;id&#39;] 의 값을 컴포넌트의 id 변수에 할당한다. 이제 /articles/230 을 방문하면 컴포넌트의 id 변수에 230 이 할당된다. 그 외 route.queryParams, route.data, route.url 등의 Observable 프로퍼티도 존재 하니 공식 문서를 참조하길 바란다. 6. Route guards유저가 항상 제공하는 라우팅을 방문 할 수 있는 것은 아니다. 만약 사용자가 어떠한 컴포넌트에 접근할 권한이 없다면 로그인(인증) 을 해야한다. 만약 컴포넌트를 표현 하기 전에 일부 데이터를 가져와야 할 경우도 있다. 혹은 변경 중인 작업들을 저장하지 않고 페이지를 나갈 때도 없어져도 괜찮은지 물을 수도 잇다. 이러한 시나리오를 처리하기 위해 라우팅 설정에 Route Guards 를 추가 할 수 있다. 이런 가드(Guard) 는 boolean 응답으로 동기적으로 반환이 가능하다. 그러나 많은 경우 안에서 동기적으로 대답을 낼 수가 없다. 관리자는 사용자에게 질문하거나 서버 변경사항을 저장하거나 새로운 데이터를 가져올 수 있다. 이것들은 모두 비동기직 작업이다. 따라서 라우터는 여러 종류의 가드를 지원한다. CanActivate 는 라우트 탐색을 허용 여부를 결정 할 수 있다. CanActivateChild() 는 자식 라우트 탐색 허용 여부를 결정 할 수 있다. CanDeactivate 를 사용하여 현재 라우트에서 다른 라우트로 이동 가능 여부를 결정할 수 있다. Resolve 는 라우트 활성화 전 데이터를 검색을 수행하고 탐색을 진행 하게 할 수 있다. CanLoad 는 필요한 모듈을 로드 후 라우트 탐색을 할 수 있도록 비동기적으로 진행하게 할 수 있다. 가드에 대해서 더 궁금하다면 angular 공식문서를 참조하길 바란다. [참조] : ng-book2 : The Complete Book on AngularJS 2, https://angular.io","categories":[{"name":"angular","slug":"angular","permalink":"https://doyeonOh.github.io/categories/angular/"}],"tags":[{"name":"angular2","slug":"angular2","permalink":"https://doyeonOh.github.io/tags/angular2/"},{"name":"routing","slug":"routing","permalink":"https://doyeonOh.github.io/tags/routing/"},{"name":"angular","slug":"angular","permalink":"https://doyeonOh.github.io/tags/angular/"}],"keywords":[{"name":"angular","slug":"angular","permalink":"https://doyeonOh.github.io/categories/angular/"}]},{"title":"Angular2 Routing (1)","slug":"Angular2-Routing","date":"2016-12-10T06:00:00.000Z","updated":"2017-03-14T11:02:29.644Z","comments":true,"path":"2016/12/10/Angular2-Routing/","link":"","permalink":"https://doyeonOh.github.io/2016/12/10/Angular2-Routing/","excerpt":"","text":"제가 알고 있거나 공부하고 있는 주제에 대하여 포스팅 할 계획을 갖고 있습니다. 글 쓰는 데에는 재주가 없지만 지속적으로 업데이트 할 예정입니다. 부족한 점이 있다면 댓글을 남겨주세요. Angular2 Routing1. Routing ?일단 라우팅에 대해서 알아보자. 일반적으로 웹 개발에서, 라우팅은 어플리케이션의 서로 다른 영역들을 구분하는 것을 의미한다. 모두 알다시피 / 경로로 방문하면 어플리케이션의 홈 라우트를 방문하길 원할 것이고, /about 페이지로 방문하면 about page 로 렌더링하기 원할 것이다. 즉, 라우팅을 하는 이유를 추려보자면 app 안에서 서로 다른 영역을 구분 할 수 있다. app 안에서 상태를 유지한다. 특정 룰에 기반한 app 의 영역을 보호한다. 정도가 될 수 있겠다. 2. Angular2 의 Routing ComponentAngular2 에서 라우팅 설정에 사용되는 메인 컴포넌트 3개가 있다. Routes 는 어플리케이션이 지원하는 라우트를 표현한다. RouterOutlet 은 확장된 각 라우트의 컨텐트를 얻을 수 있다. RouteLink directive 는 어플리케이션 내의 다른 라우트로 링크하기 위해 사용된다. 위의 설명만 들으면 뭔소린지 모를 것이다. 다음을 계속 보자. 그 전에 일단 Angular2 의 router 사용하려면 @angular/router 패키지로부터 다음과 같이 import 해야 한다. 1234import &#123; RouterModule, Routes&#125; from '@angular/router'; 2-1. Routes어플리케이션의 라우트를 정의하려면 이 놈이 필요하다. 즉, 라우터를 사용하는데 필요한 의존들을 설정한 Routes 를 생성하고 적용하기 위해 RouterModule.forRoot(routes) 처럼 세팅해야 한다. 뭔 소린지 모르니 다음 코드를 보자. 1234567const routes: Routes = [ &#123; path: '', redirectTo: 'home', pathMatch: 'full' &#125;, &#123; path: 'home', component: HomeComponent &#125;, &#123; path: 'about', component: AboutComponent &#125;, &#123; path: 'contact', component: ContactComponent &#125;, &#123; path: 'contactus', redirectTo: 'contact' &#125;]; routes 에 대한 설명을 하자면 path 는 이 라우트가 처리할 URL 을 지정한다. component 는 path 에 따라 처리되어질 연결된 컴포넌트를 의미한다. redirectTo 는 필수는 아니지만 어플리케이션 내부에 존재하는 라우트 경로로 리다이렉트 할 때 사용된다. 그 외에도 등등 이 있으니 공식 문서 참고. 자 이 routes 를 만들었으니 어플리케이션에 적용을 해보자. Routes 를 적용하자 RouterModule 을 import 한다. NgModule 의 imports 안에 RouterModule.forRoot(routes) 를 사용하여 routes 를 적용한다. 1234567891011121314151617181920212223242526272829303132...import &#123; RouterModule, Routes&#125; from '@angular/router';...const routes: Routes = [ &#123; path: '', redirectTo: 'home', pathMatch: 'full' &#125;, &#123; path: 'home', component: HomeComponent &#125;, &#123; path: 'about', component: AboutComponent &#125;, &#123; path: 'contact', component: ContactComponent &#125;, &#123; path: 'contactus', redirectTo: 'contact' &#125;];@NgModule(&#123; declarations: [ RoutesDemoApp, HomeComponent, AboutComponent, ContactComponent ], imports: [ BrowserModule, RouterModule.forRoot(routes) // &lt;-- 적용 ], bootstrap: [ AppModule ]&#125;)class RoutesAppModule &#123;&#125;platformBrowserDynamic().bootstrapModule(RoutesAppModule).catch((err: any) =&gt; console.error(err)); 2-2. RouterOutlet라우트를 변경할 때 외부 layout 은 냅두고 내부만 바꾸고 싶을 때가 있다. 그럴 때 사용하는 것이 RouterOutlet 이다. 이미 NgModule 에서 RouterModule 을 import 했기 때문에 해당 모듈에 선언된(declearations) 모든 컴포넌트들은 해당 모듈에 포함된 RouterOutlet 을 사용 할 수 있다. 사용 할 때는 해당 컴포넌트에 연결된 template 에서 router-outlet 디렉티브를 사용한다. 1234567891011121314151617@Component(&#123; selector: 'router-app', template: ` &lt;div&gt; &lt;nav&gt; &lt;a&gt;Navigation:&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a [routerLink]=\"['home']\"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a [routerLink]=\"['about']\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a [routerLink]=\"['contact']\"&gt;Contact us&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;router-outlet&gt;&lt;/router-outlet&gt; &lt;-- 이것이 router-outlet!!! &lt;/div&gt;`&#125;)class RoutesApp &#123; &#125; routerLink 는 바로 다음에 설명하겠지만, 위의 코드에서 home, about, contact 앵커 태그를 클릭하면 하단 router-outlet 에 해당 라우트가 연결된 component 로 전환 될 것이다. 2-3. RouterLinkRouterLink 는 [routerLink] 를 사용한다.(위에 코드에 보이시죠?) 근데 왜 이걸 써야 할까? 알다시피 다음과 같이 직접적으로 HTML에 링크를 시도할 수 있지 않은가? 1&lt;a href=\"/#/home\"&gt;Home&lt;/a&gt; 이렇게 하면 큰일 난다. 아니 큰일은 나지 않지만, 링크를 클릭하면 페이지가 새로고침된다. 우린 SPA 프로그래밍을 하는데 페이지가 새로고침이 되면 SPA 프로그래밍이 아니다.(Single Page Application) Angular2 에서 이 문제를 해결한 것이 RouterLink 이다. 이것을 사용하면 페이지 새로고침 없이 해당 라우트로 링크 할 수 있다. 위에도 나와 있지만 이 directive 는 다음과 같이 특별한 문법으로 link 를 작성 할 수 있다. 123456&lt;a&gt;Navigation:&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a [routerLink]=\"['home']\"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a [routerLink]=\"['about']\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a [routerLink]=\"['contact']\"&gt;Contact us&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; 왼쪽 편에 [routerLink] 는 현재 엘리먼트에 directive 를 적용한다. (여기서는 a 태그) 그리고 오른편에는 route 경로를 가지고 있는 배열이 있다. 생각하는 바와 같이 클릭하면 해당 home, about, contact 라우트로 이동 한다. 배열에 문자열만 턱하니 있으니 뭔가 이상해 보일 수도 있겠지만, 링크 할 때 제공 할 수 있는 것들이 더 많기 때문에 배열로 이루어져 있는 것이다. 더 제공 할 수 있는 것에 대해서는 공식 문서를 참조하자. 3. &lt;base href=&quot;/&quot;&gt; 와 APP_BASE_HREF3-1. &lt;base href=&quot;/&quot;&gt;다음 코드 index.html 파일을 보자. 12345678910111213141516&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;base href=\"/\"&gt; &lt;---------- 여기!!!!!! &lt;title&gt;ng-book 2: Angular 2 Router&lt;/title&gt; &#123;% for (var css in o.htmlWebpackPlugin.files.css) &#123; %&#125; &lt;link href=\"&#123;%=o.htmlWebpackPlugin.files.css[css] %&#125;\" rel=\"stylesheet\"&gt; &#123;% &#125; %&#125; &lt;/head&gt; &lt;body&gt; &lt;router-app&gt;&lt;/router-app&gt; &lt;script src=\"/core.js\"&gt;&lt;/script&gt; &lt;script src=\"/vendor.js\"&gt;&lt;/script&gt; &lt;script src=\"/bundle.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 위의 &lt;base href=&quot;/&quot;&gt; 만 빼면 그냥 알 수 있는 코드이다. 이 태그는 전통적으로 브라우저에게 어딜 봐야 하는지 알려주기 위해 사용된다. 예를 들어, /hello 라는 라우트 경로를 가지고 있고, base 엘리먼트에 href=&quot;app&quot; 이라고 선언되었다면 어플리케이션은 해당 경로를 /app/hello 로 가리킬 것이다. 다음 코드는 그 예제이다. 123456789101112131415const routes: Routes = [ &#123; path: 'app', component: AppComponent &#125; ];@NgModule(&#123; declarations: [ AppComponent ], imports: [ RouterModule.forRoot(routes) ], ...&#125;)export class AppModule &#123; &#125; 12345678910&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;base href=\"/app\"&gt; ... &lt;/head&gt; &lt;body&gt; ... &lt;/body&gt;&lt;/html&gt; base 태그가 /app 로 되있기 때문에 routes 경로도 app 으로 지정해주어야 한다. 3-2. APP_BASE_HREF&lt;base href=&quot;/&quot;&gt; 를 코드 안에도 넣을 수 있다. 그것은 바로 NgModule 의 APP_BASE_HREF 를 제공하면 된다! 123456789101112@NgModule(&#123; declarations: [ RoutesDemoApp ], imports: [ BrowserModule, RouterModule.forRoot(routes) // &lt;-- routes ], bootstrap: [ RoutesDemoApp ], providers: [ &#123; provide: LocationStrategy, useClass: HashLocationStrategy &#125;, &#123; provide: APP_BASE_HREF, useValue: '/' &#125; // &lt;--- 여기 ]&#125;) provider 에 있는 { proivde: APP_BASE_HREF, useValue: &#39;/&#39; } 는 방금 말했듯이 HTML 헤더에 있던 &lt;base href=&quot;/&quot;&gt; 와 동일 하다. Angular2 router 를 사용하려면 둘 중에 하나를 명시해주어야 한다. 4. Routing StrategyAngular2 의 라우팅 전략은 여러 가지가 있다. 그 중에 기본 전략으로 지정 된 것은 PathLocationStrategy 이다. 이것은 HTML5 routing 이라고도 불리는 데, 이 전략을 사용하는 동안 라우트들은 regular path 들을 표현한다. 이 전략은 LocationStrategy 클래스를 바인딩 하여 어플리케이션의 라우팅 전략을 변경 할 수 있다. 기본적으로 사용되는 PathLocationStrategy 를 대신하여 HashLocationStrategy 를 사용 할 수 있다. 이 전략은 쉽게 말하면 hash(#) 기반 전략이다. 즉 PathLocationStrategy 에서 사용되던 /hello 라는 라우트가 HashLocationStrategy 에서는 /#/hello 로 표현된다. HTML5 Routing 을 사용하는 경우, 보통 경로들과 다르지 않기 때문에 구분을 주고자 한다면 사용하는 것을 추천한다. 이제 새로운 전략을 한번 사용해보자. 일단 LocationStrategy 와 HashLocationStrategy 를 import 해야 한다. 1import &#123; LocationStrategy, HashLocationStrategy &#125; from '@angular/common'; 해당 클래스 들은 @angular/common 패키지에 존재한다. 이제 이 클래스들을 NgModule 에 작성하자. 12345...providers: [ &#123; provide: LocationStrategy, useClass: HashLocationStrategy &#125; ]... 이렇게 하면 적용된다. 그외 전략은 공식 문서를 참고하자.. [참조] : ng-book2 : The Complete Book on AngularJS 2","categories":[{"name":"angular","slug":"angular","permalink":"https://doyeonOh.github.io/categories/angular/"}],"tags":[{"name":"angular2","slug":"angular2","permalink":"https://doyeonOh.github.io/tags/angular2/"},{"name":"routing","slug":"routing","permalink":"https://doyeonOh.github.io/tags/routing/"},{"name":"angular","slug":"angular","permalink":"https://doyeonOh.github.io/tags/angular/"}],"keywords":[{"name":"angular","slug":"angular","permalink":"https://doyeonOh.github.io/categories/angular/"}]}]}